<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | bellbind.github.io]]></title>
  <link href="http://bellbind.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://bellbind.github.io/"/>
  <updated>2013-07-12T18:04:53+09:00</updated>
  <id>http://bellbind.github.io/</id>
  <author>
    <name><![CDATA[bellbind]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ソース用リポジトリへ保存する]]></title>
    <link href="http://bellbind.github.io/blog/2013/07/12/repo-for-source/"/>
    <updated>2013-07-12T17:47:00+09:00</updated>
    <id>http://bellbind.github.io/blog/2013/07/12/repo-for-source</id>
    <content type="html"><![CDATA[<p>octopressのdeployで、リポジトリ<code>username.github.io</code>にアップされるのは、
あくまで生成結果のファイル群だけです。ソースはアップされません。</p>

<p>ソースもアップするには、別途ソースのためのリポジトリを用意し、
そこにoctopress全体をアップします。</p>

<!-- more -->


<p>github pages用に設定したoctopressは、branchが<code>source</code>になっています。
そこで、あらためてアップロード用に<code>master</code>ブランチを用意します。</p>

<p><code>bash
git checkout -b master
</code></p>

<p>編集したファイルを追加し、masterにcommitします。</p>

<p><code>bash
git add source
git add _config.yml
git commit -m "add my posts"
</code></p>

<p>つづいて、github上でアップロードするための空リポジトリを用意します。
その名前を<code>username.github.io-octopress</code>とします。</p>

<p>リモートの設定します。</p>

<p><code>bash
git remote add origin git@github.com:username/username.github.io-octopress
git config branch.master.remote origin
</code></p>

<p>そしてpushすればアップロードされます。</p>

<p><code>bash
git push -u origin master
</code></p>

<h2>日々の更新アップロード</h2>

<p>post等のみで、configを編集しないのであれば、</p>

<p><code>bash
git add source
git commit -m "new posts"
git push
</code></p>

<p>でアップロードできるでしょう。</p>

<h2>octopress本家の更新のマージ</h2>

<p>octopressでは、オリジナルのリモートブランチが"octopress"に設定されます。
よって、以下によって本家の更新を適用できます。</p>

<p><code>bash
git pull octopress master
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new pageとテンプレートレイアウトのカスタマイズ]]></title>
    <link href="http://bellbind.github.io/blog/2013/07/12/new-page-and-layout-modification/"/>
    <updated>2013-07-12T17:13:00+09:00</updated>
    <id>http://bellbind.github.io/blog/2013/07/12/new-page-and-layout-modification</id>
    <content type="html"><![CDATA[<p>octopressは、<a href="http://jekyllrb.com/">jekyll</a>に、blogスタイルの
テンプレート構造とrake管理タスクをかぶせたものです。
markdownやyaml等で書くソースをHTMLにするのは、jekyllの機能です。</p>

<p>jekyllは、任意のサイト構造を構成することが可能で、
octopressからも、若干手間がかかるけど、任意のページやリソースを配置する
ことができます。</p>

<!-- more -->


<h2>画像ファイル、JSファイル</h2>

<p>ファイルは、<code>source/</code>以下の任意の位置に配置でき、<code>rake deploy</code>で
同じパス上にアップロードされます。
postなどからハイパーリンクを張るだけです。</p>

<h2>枠付きページ</h2>

<p>rakeコマンドで作成することができます。</p>

<p><code>bash
rake new_page[path/to/page]
</code></p>

<p>すると<code>source/path/to/page/index.markdown</code>というファイルが生成されます。
postと同様に編集して、<code>rake generate</code> &amp; <code>rake deploy</code>すれば、
postと同様な枠のついたかたちで、アップロードされます。</p>

<p>ただし、postと違ってトップページから自動でリンクが貼られることはありません。</p>

<h2>フレームレイアウトの編集</h2>

<p>たとえば、新しく作ったページを"Blog"や"Archives"と並ぶ
リンクとして追加したい場合は、
<code>source/_inlucdes/custom/navigation.html</code>をエディタで編集し、追加します。</p>

<p>```html</p>

<ul class="main-navigation">
  <li><a href="/path/to/page/">My Page</a></li>
  <li><a href="/">Blog</a></li>
  <li><a href="/blog/archives">Archives</a></li>
</ul>


<p>```</p>

<h2>枠付HTMLページ</h2>

<p>rakeコマンドで<code>.html</code>をつけて作成すると、枠付のHTMLを
生成するページソースを作成できます。</p>

<p><code>bash
rake new_page[path/to/page/index.html]
</code></p>

<p>この場合もやはりヘッダ情報YAML入りのファイルが、
<code>source/path/to/page/index.html</code>にできます。</p>

<p>この中身には、HTMLボディに入れる要素を記述します。</p>

<p>```html</p>

<div>
...
</div>


<p>```</p>

<p><code>rake generate</code>によって、このまわりに枠がついた
HTMLファイルが生成されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new post]]></title>
    <link href="http://bellbind.github.io/blog/2013/07/12/new-post/"/>
    <updated>2013-07-12T16:52:00+09:00</updated>
    <id>http://bellbind.github.io/blog/2013/07/12/new-post</id>
    <content type="html"><![CDATA[<p>記事を追加する場合、まず以下のコマンドによって
ひな形のソースファイルを作成します。</p>

<p><code>bash
rake new_post["title become url"]
</code></p>

<!-- more -->


<p>すると、<code>source/_posts/YYYY-MM-DD-title-become-url.markdown</code>という
ファイルが、以下のような内容で作成されます:</p>

<h2>```</h2>

<p>layout: post
title: &ldquo;title become url&rdquo;
date: YYYY-MM-DD mm:ss
comments: true</p>

<h2>categories: </h2>

<p>```</p>

<p>上部のマイナス3本で囲まれた領域は、ページのヘッダ情報(YAML形式)です。
rakeで渡したのはURL用のタイトルであり、ASCIIのみをURLに入れるようにしておいて、
ヘッダの<code>title</code>を日本語文に書き換えても構いません。</p>

<p>この下に本文を
<a href="http://daringfireball.net/projects/markdown/syntax">markdown形式</a>
で記入します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake generate and deploy]]></title>
    <link href="http://bellbind.github.io/blog/2013/07/12/rake-generate-and-deploy/"/>
    <updated>2013-07-12T16:49:00+09:00</updated>
    <id>http://bellbind.github.io/blog/2013/07/12/rake-generate-and-deploy</id>
    <content type="html"><![CDATA[<p>config設定や記事ポストなど何か編集をしたら、
以下のコマンドによって、サイトへdeployします。</p>

<p><code>bash
rake generate
rake deploy
</code></p>

<!-- more -->


<p>以下のコマンドでも同様です。</p>

<p><code>bash
rake gen_deploy
</code></p>

<p>octopressの提供するrakeのtask一覧は、</p>

<p><code>bash
rake -T
</code></p>

<p>で表示できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[_config.yml について]]></title>
    <link href="http://bellbind.github.io/blog/2013/07/11/config-dot-yml/"/>
    <updated>2013-07-11T14:55:00+09:00</updated>
    <id>http://bellbind.github.io/blog/2013/07/11/config-dot-yml</id>
    <content type="html"><![CDATA[<p>Octopressの設定は、<code>_config.yml</code>で行う。</p>

<!-- more -->


<p><code>_config.yml</code>には、ページheaderとして埋め込まれるsite情報を
<a href="http://magazine.rubyist.net/?0009-YAML">YAML形式</a>で記述する。</p>

<p><code>yaml
url: http://bellbind.github.io
title: bellbind.github.io
subtitle: github pages
author: bellbind
simple_search: http://google.com/search
description: &gt;
  put something
</code></p>

<p>yamlなので、<code>description</code>のように長いテキストは、インデントさせて
マルチラインで記述できる。</p>

<p>また、<code>date_format</code>を以下の
<a href="http://doc.ruby-lang.org/ja/1.9.3/method/Time/i/strftime.html">srtrftimeフォーマット</a>
にすることで、日付は、YYYY-MM-DDになるようにした。</p>

<p><code>yaml
date_format: "%F"
</code></p>

<p>最後にYAMLの注意点として、key-valueの間のコロンの後ろには
スペース1つが必須です。</p>

<p><code>yaml
user:bellbind   # 間違い
user: bellbind  # 正解
</code></p>
]]></content>
  </entry>
  
</feed>
